{"version":3,"sources":["../../src/store/stub.js"],"names":["StubStore","fromToken","prototype","getSyncToken","setSyncToken","token","storeGroup","group","getGroup","groupId","getGroups","storeRoom","room","getRoom","roomId","getRooms","removeRoom","getRoomSummaries","storeUser","user","getUser","userId","getUsers","scrollback","limit","storeEvents","events","toStart","storeFilter","filter","getFilter","filterId","getFilterIdByName","filterName","setFilterIdByName","storeAccountDataEvents","getAccountData","eventType","setSyncData","syncData","resolve","save","startup","getSavedSync","deleteAllData","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;AACA;;;;;;AACA;;;;;AAKA;;;;AAIA,SAASA,SAAT,GAAqB;AACjB,SAAKC,SAAL,GAAiB,IAAjB;AACH;;AAEDD,UAAUE,SAAV,GAAsB;;AAElB;;;;AAIAC,kBAAc,wBAAW;AACrB,eAAO,KAAKF,SAAZ;AACH,KARiB;;AAUlB;;;;AAIAG,kBAAc,sBAASC,KAAT,EAAgB;AAC1B,aAAKJ,SAAL,GAAiBI,KAAjB;AACH,KAhBiB;;AAkBlB;;;;AAIAC,gBAAY,oBAASC,KAAT,EAAgB,CAC3B,CAvBiB;;AAyBlB;;;;;AAKAC,cAAU,kBAASC,OAAT,EAAkB;AACxB,eAAO,IAAP;AACH,KAhCiB;;AAkClB;;;;AAIAC,eAAW,qBAAW;AAClB,eAAO,EAAP;AACH,KAxCiB;;AA0ClB;;;;AAIAC,eAAW,mBAASC,IAAT,EAAe,CACzB,CA/CiB;;AAiDlB;;;;;AAKAC,aAAS,iBAASC,MAAT,EAAiB;AACtB,eAAO,IAAP;AACH,KAxDiB;;AA0DlB;;;;AAIAC,cAAU,oBAAW;AACjB,eAAO,EAAP;AACH,KAhEiB;;AAkElB;;;;AAIAC,gBAAY,oBAASF,MAAT,EAAiB;AACzB;AACH,KAxEiB;;AA0ElB;;;;AAIAG,sBAAkB,4BAAW;AACzB,eAAO,EAAP;AACH,KAhFiB;;AAkFlB;;;;AAIAC,eAAW,mBAASC,IAAT,EAAe,CACzB,CAvFiB;;AAyFlB;;;;;AAKAC,aAAS,iBAASC,MAAT,EAAiB;AACtB,eAAO,IAAP;AACH,KAhGiB;;AAkGlB;;;;AAIAC,cAAU,oBAAW;AACjB,eAAO,EAAP;AACH,KAxGiB;;AA0GlB;;;;;;AAMAC,gBAAY,oBAASX,IAAT,EAAeY,KAAf,EAAsB;AAC9B,eAAO,EAAP;AACH,KAlHiB;;AAoHlB;;;;;;;AAOAC,iBAAa,qBAASb,IAAT,EAAec,MAAf,EAAuBrB,KAAvB,EAA8BsB,OAA9B,EAAuC,CACnD,CA5HiB;;AA8HlB;;;;AAIAC,iBAAa,qBAASC,MAAT,EAAiB,CAC7B,CAnIiB;;AAqIlB;;;;;;AAMAC,eAAW,mBAAST,MAAT,EAAiBU,QAAjB,EAA2B;AAClC,eAAO,IAAP;AACH,KA7IiB;;AA+IlB;;;;;AAKAC,uBAAmB,2BAASC,UAAT,EAAqB;AACpC,eAAO,IAAP;AACH,KAtJiB;;AAwJlB;;;;;AAKAC,uBAAmB,2BAASD,UAAT,EAAqBF,QAArB,EAA+B,CAEjD,CA/JiB;;AAiKlB;;;;AAIAI,4BAAwB,gCAAST,MAAT,EAAiB,CAExC,CAvKiB;;AAyKlB;;;;AAIAU,oBAAgB,wBAASC,SAAT,EAAoB,CAEnC,CA/KiB;;AAiLlB;;;;;;AAMAC,iBAAa,qBAASC,QAAT,EAAmB;AAC5B,eAAO,mBAAQC,OAAR,EAAP;AACH,KAzLiB;;AA2LlB;;;AAGAC,UAAM,gBAAW,CAAE,CA9LD;;AAgMlB;;;;AAIAC,aAAS,mBAAW;AAChB,eAAO,mBAAQF,OAAR,EAAP;AACH,KAtMiB;;AAwMlB;;;;;AAKAG,kBAAc,wBAAW;AACrB,eAAO,mBAAQH,OAAR,CAAgB,IAAhB,CAAP;AACH,KA/MiB;;AAiNlB;;;;;AAKAI,mBAAe,yBAAW;AACtB,eAAO,mBAAQJ,OAAR,EAAP;AACH;AAxNiB,CAAtB;;AA2NA;AACAK,OAAOC,OAAP,GAAiB9C,SAAjB","file":"stub.js","sourcesContent":["/*\r\nCopyright 2015, 2016 OpenMarket Ltd\r\nCopyright 2017 Vector Creations Ltd\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\"use strict\";\r\nimport Promise from 'bluebird';\r\n/**\r\n * This is an internal module.\r\n * @module store/stub\r\n */\r\n\r\n/**\r\n * Construct a stub store. This does no-ops on most store methods.\r\n * @constructor\r\n */\r\nfunction StubStore() {\r\n    this.fromToken = null;\r\n}\r\n\r\nStubStore.prototype = {\r\n\r\n    /**\r\n     * Get the sync token.\r\n     * @return {string}\r\n     */\r\n    getSyncToken: function() {\r\n        return this.fromToken;\r\n    },\r\n\r\n    /**\r\n     * Set the sync token.\r\n     * @param {string} token\r\n     */\r\n    setSyncToken: function(token) {\r\n        this.fromToken = token;\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @param {Group} group\r\n     */\r\n    storeGroup: function(group) {\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @param {string} groupId\r\n     * @return {null}\r\n     */\r\n    getGroup: function(groupId) {\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @return {Array} An empty array.\r\n     */\r\n    getGroups: function() {\r\n        return [];\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @param {Room} room\r\n     */\r\n    storeRoom: function(room) {\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @param {string} roomId\r\n     * @return {null}\r\n     */\r\n    getRoom: function(roomId) {\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @return {Array} An empty array.\r\n     */\r\n    getRooms: function() {\r\n        return [];\r\n    },\r\n\r\n    /**\r\n     * Permanently delete a room.\r\n     * @param {string} roomId\r\n     */\r\n    removeRoom: function(roomId) {\r\n        return;\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @return {Array} An empty array.\r\n     */\r\n    getRoomSummaries: function() {\r\n        return [];\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @param {User} user\r\n     */\r\n    storeUser: function(user) {\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @param {string} userId\r\n     * @return {null}\r\n     */\r\n    getUser: function(userId) {\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @return {User[]}\r\n     */\r\n    getUsers: function() {\r\n        return [];\r\n    },\r\n\r\n    /**\r\n     * No-op.\r\n     * @param {Room} room\r\n     * @param {integer} limit\r\n     * @return {Array}\r\n     */\r\n    scrollback: function(room, limit) {\r\n        return [];\r\n    },\r\n\r\n    /**\r\n     * Store events for a room.\r\n     * @param {Room} room The room to store events for.\r\n     * @param {Array<MatrixEvent>} events The events to store.\r\n     * @param {string} token The token associated with these events.\r\n     * @param {boolean} toStart True if these are paginated results.\r\n     */\r\n    storeEvents: function(room, events, token, toStart) {\r\n    },\r\n\r\n    /**\r\n     * Store a filter.\r\n     * @param {Filter} filter\r\n     */\r\n    storeFilter: function(filter) {\r\n    },\r\n\r\n    /**\r\n     * Retrieve a filter.\r\n     * @param {string} userId\r\n     * @param {string} filterId\r\n     * @return {?Filter} A filter or null.\r\n     */\r\n    getFilter: function(userId, filterId) {\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Retrieve a filter ID with the given name.\r\n     * @param {string} filterName The filter name.\r\n     * @return {?string} The filter ID or null.\r\n     */\r\n    getFilterIdByName: function(filterName) {\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Set a filter name to ID mapping.\r\n     * @param {string} filterName\r\n     * @param {string} filterId\r\n     */\r\n    setFilterIdByName: function(filterName, filterId) {\r\n\r\n    },\r\n\r\n    /**\r\n     * Store user-scoped account data events\r\n     * @param {Array<MatrixEvent>} events The events to store.\r\n     */\r\n    storeAccountDataEvents: function(events) {\r\n\r\n    },\r\n\r\n    /**\r\n     * Get account data event by event type\r\n     * @param {string} eventType The event type being queried\r\n     */\r\n    getAccountData: function(eventType) {\r\n\r\n    },\r\n\r\n    /**\r\n     * setSyncData does nothing as there is no backing data store.\r\n     *\r\n     * @param {Object} syncData The sync data\r\n     * @return {Promise} An immediately resolved promise.\r\n     */\r\n    setSyncData: function(syncData) {\r\n        return Promise.resolve();\r\n    },\r\n\r\n    /**\r\n     * Save does nothing as there is no backing data store.\r\n     */\r\n    save: function() {},\r\n\r\n    /**\r\n     * Startup does nothing.\r\n     * @return {Promise} An immediately resolved promise.\r\n     */\r\n    startup: function() {\r\n        return Promise.resolve();\r\n    },\r\n\r\n    /**\r\n     * @return {Promise} Resolves with a sync response to restore the\r\n     * client state to where it was at the last save, or null if there\r\n     * is no saved sync data.\r\n     */\r\n    getSavedSync: function() {\r\n        return Promise.resolve(null);\r\n    },\r\n\r\n    /**\r\n     * Delete all data from this store. Does nothing since this store\r\n     * doesn't store anything.\r\n     * @return {Promise} An immediately resolved promise.\r\n     */\r\n    deleteAllData: function() {\r\n        return Promise.resolve();\r\n    },\r\n};\r\n\r\n/** Stub Store class. */\r\nmodule.exports = StubStore;\r\n"]}