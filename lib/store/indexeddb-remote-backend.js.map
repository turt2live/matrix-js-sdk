{"version":3,"sources":["../../src/store/indexeddb-remote-backend.js"],"names":["RemoteIndexedDBStoreBackend","workerScript","dbName","WorkerApi","_dbName","_worker","_nextSeq","_inFlight","onmessage","_onWorkerMessage","bind","_startPromise","_doCmd","then","console","log","prototype","connect","clearDatabase","getSavedSync","setSyncData","syncData","syncToDatabase","users","getUserPresenceEvents","cmd","args","resolve","seq","def","defer","postMessage","command","promise","ev","msg","data","undefined","error","result","reject","warn"],"mappings":"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","file":"indexeddb-remote-backend.js","sourcesContent":["/*\r\nCopyright 2017 Vector Creations Ltd\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport Promise from 'bluebird';\r\n\r\n/**\r\n * An IndexedDB store backend where the actual backend sits in a web\r\n * worker.\r\n *\r\n * Construct a new Indexed Database store backend. This requires a call to\r\n * <code>connect()</code> before this store can be used.\r\n * @constructor\r\n * @param {string} workerScript URL to the worker script\r\n * @param {string=} dbName Optional database name. The same name must be used\r\n * to open the same database.\r\n * @param {Object} WorkerApi The web worker compatible interface object\r\n */\r\nconst RemoteIndexedDBStoreBackend = function RemoteIndexedDBStoreBackend(\r\n    workerScript, dbName, WorkerApi,\r\n) {\r\n    this._dbName = dbName;\r\n    this._worker = new WorkerApi(workerScript);\r\n    this._nextSeq = 0;\r\n    // The currently in-flight requests to the actual backend\r\n    this._inFlight = {\r\n        // seq: promise,\r\n    };\r\n\r\n    this._worker.onmessage = this._onWorkerMessage.bind(this);\r\n\r\n    // tell the worker the db name.\r\n    this._startPromise = this._doCmd('_setupWorker', [this._dbName]).then(() => {\r\n        console.log(\"IndexedDB worker is ready\");\r\n    });\r\n};\r\n\r\n\r\nRemoteIndexedDBStoreBackend.prototype = {\r\n    /**\r\n     * Attempt to connect to the database. This can fail if the user does not\r\n     * grant permission.\r\n     * @return {Promise} Resolves if successfully connected.\r\n     */\r\n    connect: function() {\r\n        return this._startPromise.then(() => this._doCmd('connect'));\r\n    },\r\n\r\n    /**\r\n     * Clear the entire database. This should be used when logging out of a client\r\n     * to prevent mixing data between accounts.\r\n     * @return {Promise} Resolved when the database is cleared.\r\n     */\r\n    clearDatabase: function() {\r\n        return this._startPromise.then(() => this._doCmd('clearDatabase'));\r\n    },\r\n\r\n    /**\r\n     * @return {Promise} Resolves with a sync response to restore the\r\n     * client state to where it was at the last save, or null if there\r\n     * is no saved sync data.\r\n     */\r\n    getSavedSync: function() {\r\n        return this._doCmd('getSavedSync');\r\n    },\r\n\r\n    setSyncData: function(syncData) {\r\n        return this._doCmd('setSyncData', [syncData]);\r\n    },\r\n\r\n    syncToDatabase: function(users) {\r\n        return this._doCmd('syncToDatabase', [users]);\r\n    },\r\n\r\n\r\n    /**\r\n     * Load all user presence events from the database. This is not cached.\r\n     * @return {Promise<Object[]>} A list of presence events in their raw form.\r\n     */\r\n    getUserPresenceEvents: function() {\r\n        return this._doCmd('getUserPresenceEvents');\r\n    },\r\n\r\n    _doCmd: function(cmd, args) {\r\n        // wrap in a q so if the postMessage throws,\r\n        // the promise automatically gets rejected\r\n        return Promise.resolve().then(() => {\r\n            const seq = this._nextSeq++;\r\n            const def = Promise.defer();\r\n\r\n            this._inFlight[seq] = def;\r\n\r\n            this._worker.postMessage({\r\n                command: cmd,\r\n                seq: seq,\r\n                args: args,\r\n            });\r\n\r\n            return def.promise;\r\n        });\r\n    },\r\n\r\n    _onWorkerMessage: function(ev) {\r\n        const msg = ev.data;\r\n\r\n        if (msg.command == 'cmd_success' || msg.command == 'cmd_fail') {\r\n            if (msg.seq === undefined) {\r\n                console.error(\"Got reply from worker with no seq\");\r\n                return;\r\n            }\r\n\r\n            const def = this._inFlight[msg.seq];\r\n            if (def === undefined) {\r\n                console.error(\"Got reply for unknown seq \" + msg.seq);\r\n                return;\r\n            }\r\n            delete this._inFlight[msg.seq];\r\n\r\n            if (msg.command == 'cmd_success') {\r\n                def.resolve(msg.result);\r\n            } else {\r\n                def.reject(msg.error);\r\n            }\r\n        } else {\r\n            console.warn(\"Unrecognised message from worker: \" + msg);\r\n        }\r\n    },\r\n};\r\n\r\nexport default RemoteIndexedDBStoreBackend;\r\n"]}