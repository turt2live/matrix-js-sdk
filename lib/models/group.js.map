{"version":3,"sources":["../../src/models/group.js"],"names":["EventEmitter","require","utils","Group","groupId","name","avatarUrl","myMembership","inviter","inherits","prototype","setProfile","emit","setMyMembership","membership","setInviter","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA;;;AAGA,IAAMA,eAAeC,QAAQ,QAAR,EAAkBD,YAAvC;;AAEA,IAAME,QAAQD,QAAQ,UAAR,CAAd;;AAEA;;;;;;;;;;;;;AAaA,SAASE,KAAT,CAAeC,OAAf,EAAwB;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,OAAL,GAAe,IAAf;AACH;AACDN,MAAMO,QAAN,CAAeN,KAAf,EAAsBH,YAAtB;;AAEAG,MAAMO,SAAN,CAAgBC,UAAhB,GAA6B,UAASN,IAAT,EAAeC,SAAf,EAA0B;AACnD,QAAI,KAAKD,IAAL,KAAcA,IAAd,IAAsB,KAAKC,SAAL,KAAmBA,SAA7C,EAAwD;;AAExD,SAAKD,IAAL,GAAYA,QAAQ,KAAKD,OAAzB;AACA,SAAKE,SAAL,GAAiBA,SAAjB;;AAEA,SAAKM,IAAL,CAAU,eAAV,EAA2B,IAA3B;AACH,CAPD;;AASAT,MAAMO,SAAN,CAAgBG,eAAhB,GAAkC,UAASC,UAAT,EAAqB;AACnD,QAAI,KAAKP,YAAL,KAAsBO,UAA1B,EAAsC;;AAEtC,SAAKP,YAAL,GAAoBO,UAApB;;AAEA,SAAKF,IAAL,CAAU,oBAAV,EAAgC,IAAhC;AACH,CAND;;AAQA;;;;;;AAMAT,MAAMO,SAAN,CAAgBK,UAAhB,GAA6B,UAASP,OAAT,EAAkB;AAC3C,SAAKA,OAAL,GAAeA,OAAf;AACH,CAFD;;AAIAQ,OAAOC,OAAP,GAAiBd,KAAjB;;AAEA;;;;;;;;;;;AAWA","file":"group.js","sourcesContent":["/*\r\nCopyright 2017 New Vector Ltd\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n/**\r\n * @module models/group\r\n */\r\nconst EventEmitter = require(\"events\").EventEmitter;\r\n\r\nconst utils = require(\"../utils\");\r\n\r\n/**\r\n * Construct a new Group.\r\n *\r\n * @param {string} groupId The ID of this group.\r\n *\r\n * @prop {string} groupId The ID of this group.\r\n * @prop {string} name The human-readable display name for this group.\r\n * @prop {string} avatarUrl The mxc URL for this group's avatar.\r\n * @prop {string} myMembership The logged in user's membership of this group\r\n * @prop {Object} inviter Infomation about the user who invited the logged in user\r\n *       to the group, if myMembership is 'invite'.\r\n * @prop {string} inviter.userId The user ID of the inviter\r\n */\r\nfunction Group(groupId) {\r\n    this.groupId = groupId;\r\n    this.name = null;\r\n    this.avatarUrl = null;\r\n    this.myMembership = null;\r\n    this.inviter = null;\r\n}\r\nutils.inherits(Group, EventEmitter);\r\n\r\nGroup.prototype.setProfile = function(name, avatarUrl) {\r\n    if (this.name === name && this.avatarUrl === avatarUrl) return;\r\n\r\n    this.name = name || this.groupId;\r\n    this.avatarUrl = avatarUrl;\r\n\r\n    this.emit(\"Group.profile\", this);\r\n};\r\n\r\nGroup.prototype.setMyMembership = function(membership) {\r\n    if (this.myMembership === membership) return;\r\n\r\n    this.myMembership = membership;\r\n\r\n    this.emit(\"Group.myMembership\", this);\r\n};\r\n\r\n/**\r\n * Sets the 'inviter' property. This does not emit an event (the inviter\r\n * will only change when the user is revited / reinvited to a room),\r\n * so set this before setting myMembership.\r\n * @param {Object} inviter Infomation about who invited us to the room\r\n */\r\nGroup.prototype.setInviter = function(inviter) {\r\n    this.inviter = inviter;\r\n};\r\n\r\nmodule.exports = Group;\r\n\r\n/**\r\n * Fires whenever a group's profile information is updated.\r\n * This means the 'name' and 'avatarUrl' properties.\r\n * @event module:client~MatrixClient#\"Group.profile\"\r\n * @param {Group} group The group whose profile was updated.\r\n * @example\r\n * matrixClient.on(\"Group.profile\", function(group){\r\n *   var name = group.name;\r\n * });\r\n */\r\n\r\n/**\r\n * Fires whenever the logged in user's membership status of\r\n * the group is updated.\r\n * @event module:client~MatrixClient#\"Group.myMembership\"\r\n * @param {Group} group The group in which the user's membership changed\r\n * @example\r\n * matrixClient.on(\"Group.myMembership\", function(group){\r\n *   var myMembership = group.myMembership;\r\n * });\r\n */\r\n"]}