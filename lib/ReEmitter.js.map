{"version":3,"sources":["../src/ReEmitter.js"],"names":["Reemitter","target","boundHandlers","eventName","args","emit","source","eventNames","undefined","_handleEvent","bind","boundHandler","on"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;IAIqBA,S;AACjB,uBAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcA,MAAd;;AAEA;AACA;AACA,aAAKC,aAAL,GAAqB,EAArB;AACH;;;;qCAEYC,S,EAAoB;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AAC7B,4BAAKH,MAAL,EAAYI,IAAZ,iBAAiBF,SAAjB,SAA+BC,IAA/B;AACH;;;+BAEME,M,EAAQC,U,EAAY;AAAA;AAAA;AAAA;;AAAA;AACvB,gEAAwBA,UAAxB,4GAAoC;AAAA,wBAAzBJ,SAAyB;;AAChC,wBAAI,KAAKD,aAAL,CAAmBC,SAAnB,MAAkCK,SAAtC,EAAiD;AAC7C,6BAAKN,aAAL,CAAmBC,SAAnB,IAAgC,KAAKM,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,EAA6BP,SAA7B,CAAhC;AACH;AACD,wBAAMQ,eAAe,KAAKT,aAAL,CAAmBC,SAAnB,CAArB;;AAEAG,2BAAOM,EAAP,CAAUT,SAAV,EAAqBQ,YAArB;AACH;AARsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS1B;;;;;kBAtBgBX,S","file":"ReEmitter.js","sourcesContent":["/*\r\nCopyright 2015, 2016 OpenMarket Ltd\r\nCopyright 2017 Vector Creations Ltd\r\nCopyright 2017 New Vector Ltd\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n/**\r\n * @module\r\n */\r\n\r\nexport default class Reemitter {\r\n    constructor(target) {\r\n        this.target = target;\r\n\r\n        // We keep one bound event handler for each event name so we know\r\n        // what event is arriving\r\n        this.boundHandlers = {};\r\n    }\r\n\r\n    _handleEvent(eventName, ...args) {\r\n        this.target.emit(eventName, ...args);\r\n    }\r\n\r\n    reEmit(source, eventNames) {\r\n        for (const eventName of eventNames) {\r\n            if (this.boundHandlers[eventName] === undefined) {\r\n                this.boundHandlers[eventName] = this._handleEvent.bind(this, eventName);\r\n            }\r\n            const boundHandler = this.boundHandlers[eventName];\r\n\r\n            source.on(eventName, boundHandler);\r\n        }\r\n    }\r\n}\r\n"]}